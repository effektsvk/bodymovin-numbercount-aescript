var prop1 = app.project.activeItem.layer(1).property("Text").property("Source Text");var keyTimesLinear = [];var keyTimesEaseOut = [];var keyTimesEaseIn = [];var keyTimes = [];var keyValues = [];// UIvar w = new Window("dialog", "Form");var durationGroup = w.add("group");durationGroup.alignment = "right";durationGroup.add("statictext", undefined, "Duration:");var durationInput = durationGroup.add("edittext");	durationInput.characters = 10;var numberFromGroup = w.add("group");numberFromGroup.alignment = "right";numberFromGroup.add("statictext", undefined, "Number From:");var numberFromInput = numberFromGroup.add("edittext");	numberFromInput.characters = 10;var numberToGroup = w.add("group");numberToGroup.alignment = "right";numberToGroup.add("statictext", undefined, "Number To:");var numberToInput = numberToGroup.add("edittext");	numberToInput.characters = 10;var animTypeGroup = w.add("group");animTypeGroup.alignment = "right";animTypeGroup.add("statictext", undefined, "Anim Type:");var animTypeInput = animTypeGroup.add("dropdownlist", undefined, ["linear", "easeOut", "easeIn"]);	animTypeInput.selection = 0;var buttonGroup = w.add("group");buttonGroup.alignment = "right";buttonGroup.add("button", undefined, "OK");buttonGroup.add("button", undefined, "Cancel");if(w.show()==1) {	duration = durationInput.text;	numberFrom = numberFromInput.text;	numberTo = numberToInput.text;	animType = animTypeInput.selection.index;	main();} else {	w.close()}w.show();function main() {	// gets keyframe values	for (i=numberFrom; i<=numberTo; i++) {		keyValues.push(i);	};	// gets keyframe times - linear	for (i=0; i<=keyValues.length; i++) {		keyTimesLinear.push((duration/keyValues.length)*i);	};	// gets keyframe times - easeOut	function easeOut(t, b, c, d) {		return c * Math.sin(t/d * (Math.PI/2)) + b;	};	for (i=0; i<keyTimesLinear.length; i++) {		keyTimesEaseOut.push(easeOut(keyTimesLinear[i], keyTimesLinear[0], keyTimesLinear[keyTimesLinear.length - 1], duration));	};	// gets keyframe times - easeIn	function easeIn(t, b, c, d) {		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;	};	for (i=0; i<keyTimesLinear.length; i++) {		keyTimesEaseIn.push(easeIn(keyTimesLinear[i], keyTimesLinear[0], keyTimesLinear[keyTimesLinear.length - 1], duration));	};	switch(animType) {		case 0: //linear			keyTimes = keyTimesLinear;			break;		case 1: //easeOut			keyTimes = keyTimesEaseOut;			break;		case 2: //easeIn			keyTimes = keyTimesEaseIn;			break;		default: 			alert("bad animType")	};	app.beginUndoGroup("Keys");	for (var k=0; k<keyTimes.length-1; k++) {	    prop1.setValueAtTime(keyTimes[k], keyValues[k]);	}	app.endUndoGroup();}